#!/usr/bin/perl
# (c) 2013 - Xavier Berger - http://rpi-experiences.blogspot.fr/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
$|=1;
$SIG{CHLD}   = 'IGNORE';
$SIG{INT}    = sub { stop(); }; # catch Ctrl+C

package Configuration;
use strict;

sub new
{
  my $this = bless { }, shift;
  $0 =~ /(\w+)$/;
  $this->{'status_file'} = "./$1.status";
  $this->{'conf_file'} = "./$1.conf";
  return $this;
}

sub Load
{
  my $this = shift;

  # load configuration
  my $section;
  open ( FILE, $this->{'conf_file'})
    or die "Error while openning $this->{'conf_file'}: $!\n";
  while (<FILE>){
    chomp;
    /^\s*#|^$/ and next;
    /\[(.*)\]/ and $section=$1 and next;
    my ($namelist,$source,$regexp)= split('=',$_);
    my @names=split(',',$namelist);
    push(@{$this->{'section'}->{$section}}, @names);
    my $switch = $section ? "always" : "once";
    $this->{'source'}->{$switch}->{$source}->{$regexp} = \@names;
  }
  close(FILE);

  # check rrd files and create them if they are missing
  for ( keys %{$this->{'section'}} ){
    $_ or next;
    $this->{'status'} = $this->{'status'} . "\"$_\",";
    $_ and ( -f "$_.rrd" or $this->CreateRRD($_) );
  }
  $this->{'status'} =~ s/,$/]/;
  $this->{'status'} = "\"section\":[".$this->{'status'} ;


=cut
### DEBUG -> ###
  print "===== SOURCES =====\n";
  my %result = %{$this->{'source'}};
  for my $switch (keys %result){
    print "$switch\n";
    my %subresult = %{$result{$switch}};
    for my $source (keys %subresult){
      print "\t$source\n";
      my %subsubresult = %{$subresult{$source}};
      for my $regexp (keys %subsubresult){
        print "\t\t$regexp\n\t\t\t@{$subsubresult{$regexp}}\n";
      }
      print "\n";
    }
  }

  print "===== SECTIONS =====\n";
  my %result = %{$this->{'section'}};
  for my $section (keys %result){
    print ($section || "Common");
    print "\n\t@{$result{$section}}\n";
  }

  print "\n";
### <- DEBUG ###
=cut
}

sub CreateRRD
{
  my $this = shift;
  my $section = shift;

  my $current = time();
  my $start = $current - 60;
  my @data=();

  # creat the list of data to stor into the rrd
  foreach ( @{$this->{'section'}->{$section}} ){
     push(@data, "DS:$_:GAUGE:600:U:U");
  }

  RRDs::create( "$section.rrd",
                "--start", $start,
                "--step", 10,
                @data,
                "RRA:AVERAGE:0.5:1:8640",    # 1 day with interval of 10sec
                "RRA:AVERAGE:0.5:6:2880",    # 2 day with interval of 1min
                "RRA:AVERAGE:0.5:60:2016",   # 2 week with interval of 10min
                "RRA:AVERAGE:0.5:180:1488",  # 1 mounth with interval of 30min
                "RRA:AVERAGE:0.5:360:8784"   # 1 year with interval of 1hour
                );
}

package Monitor;
use strict;
use RRDs;

sub new
{
  my $this = bless { }, shift;
  $this->{'delay'} = 10;  # default values 10s
  return $this;
}

sub Run
{
  # start main loop
  my $this = shift;
  my $config = shift;

  # process data that should be extracted once
  $this->Process($config->{'source'}->{'once'});
  for(;;)
  {
    # Process data
    $this->Process($config->{'source'}->{'always'});

    # Store and show extracted data
    $this->Status($config);

    # tempo before next process
    $this->{'delay'} or last;
    sleep $this->{'delay'};
  }

  # Remove status file when applocation stop
  -f $config->{'status_file'} and unlink $config->{'status_file'};
}

sub Process
{
  my $this = shift;
  my $list = shift;

  # for each source, read data and apply all regexp
  foreach my $source ( keys (%$list) ){
    my $file = -f $source ? $source : "$source|";
    open(FEED, $file);
    while (<FEED>){
      foreach my $regexp ( keys (%{$list->{$source}}) ){
        @_ = /$regexp/ or next;
        my $i=0;
        my @names = @{$list->{$source}->{$regexp}};
        foreach ( @_ ) {
          $this->{'result'}->{@names[$i]}=@_[$i];
          $i++;
        }
      }
    }
    close FEED;
  }
}

sub Status
{
  my $this = shift;
  my $config = shift;

  # construct printable status
  my $status = "";
  my %result = %{$this->{'result'}};
  $status .= "\"$_\":\"$result{$_}\"\n" for (keys %result);

  # Print status on screen if requested
  $this->{'show'} and print STDOUT "$status";

  chomp($status);
  $status=~s/\n/, /g;
  $status="{ $config->{'status'}, $status }";

  # write current status in file (JSON)
  open(FILE, "> $config->{'status_file'}")
    or warn $!;
    print FILE $status ;
  close(FILE);

  # add data in round robin database
  my %rrd = %{$config->{'section'}};
  for my $section (keys %rrd){
    $section or next;
    my $data="N";
    foreach ( @{$rrd{$section}} ) {
      $data .= ":$this->{'result'}->{$_}";
    }
    RRDs::update("$section.rrd", $data);
  }
}

package main;
use strict;

sub help
{
  # print help and exit
  die <<EOF;

$0

NAME
  $0

USAGE
  $0 blabla

DESCRIPTION
  $0 is designed extract data from RPI system and store status in json
  and statistic into RRD.

OPTIONS
  -c, --conf       Delay between check (default 10sec)
  -d, --delay       Delay between check (default 10sec)
  -h, --help        Shows this help and exit
  -s, --show        Show status in STDOUT
  -v, --version     Show version and exit

EOF
}

my $monitor = Monitor->new();
my $configuration = Configuration->new();

sub stop
{
  $monitor->{'delay'} = 0;
}

# read command lines
while($_ = shift)
{
  /-c(onf)?/        and $configuration->{'conf_file'} = shift and next;
  /-d(elay)?/       and $monitor->{'delay'} = shift and next;
  /-h(elp)?/        and help;
  /-s(how)?/        and ++$monitor->{'show'}        and next;
  /-v(ersion)?/     and die "$0 version 1.0\n";
}

# Start monitor manager
$configuration->Load();
$monitor->Run($configuration);


