#!/bin/sh
### BEGIN INIT INFO
# Provides:          rpimonitor
# Required-Start:    $networking $remote_fs
# Required-Stop:     $networking $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: RPi-Monitor daemon
# Description:       Daemon for RPi serlf monitoring
### END INIT INFO

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 
   exit 1
fi

# Source function library.
. /lib/lsb/init-functions

DAEMON="/usr/local/rpimonitor/rpimonitord"
PIDFILE="/var/run/rpimonitord.pid"
DEFAULTFILE="/etc/default/rpimonitor"

[ -x $DAEMON ] || exit 0

[ -r $DEFAULTFILE ] && . $DEFAULTFILE

start() {
	if [ "$DAEMON_START" = "0" ]; then
        echo "Rpi-monitor deamon id disabled."
        echo "Update /etc/default/rpimonitor and set DEAMON_START to 1."
		return 0
	fi
	
	
	#TODO: check is already runing according to PIDFILE
	rm /var/run/rpimonitord.pid

    log_daemon_msg "Starting RPi-Monitor" "rpimonitord"
    $DAEMON -b $PIDFILE $SECURE $CONFFILE
    status=$?
    log_end_msg $status
}

stop() {
    log_daemon_msg "Stopping RPi-Monitor" "rpimonitord"
    for pid in $(cat $PIDFILE); do
        kill -9 $pid > /dev/null 2>&1
      done
    status=$?
    log_end_msg $status
}

restart() {
    stop
    sleep 2
    start
}

status(){
    echo -n "RPi-Monitor status: "
    for pid in $(cat $PIDFILE); do 
        kill -0 $pid > /dev/null 2>&1 && echo -n "[ \033[1;32mok\033[0m ]" || echo -n "[\033[31mFAIL\033[0m]"; 
    done; 
    echo
}

case "$1" in
    start)
    	start
    ;;
    stop)
    	stop
    ;;
    status)
        status
    ;;
    restart)
    	restart
    ;;
    *)
    	echo "Usage: $0 {start|stop|restart|status}"
    ;;
esac

exit 0
